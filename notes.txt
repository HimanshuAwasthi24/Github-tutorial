What is Git?
Free open source version control system.

What is version control?
tracking of changes in codes and managing websites

Repository?
place where your project is kept

Github?
website to host your repositories online

< git clone <repo url> > => create a replica of your repo in local machine

< git status > => check status of your changes

< git add . or filename > => tell git to track your files and folders or put them in staging area

< git commit -m "message" > => save the changes or taking snapshot but still the changes are saved locally

****** Adding SSH Keys *****
These keys are added in github to tell github that you are the owner of your account by generating the key locally

lets generate a key locally===>

< ssh-keygen -t rsa -b 4096 -C "your-email@example .com" >

Note: email should be same you used while logging into your github account

=> now two keys will be generated you have to get the details of key which have .pub extention and another one is private which will be matched by github that the .pub key is generated by you

< ls | grep your_key_name.pub >
< cat your_key_name.pub >

copy all the contents goto github and then in settings and then in ssh and key and add your key there


now add ssh your key agent using below link
< 
 
 https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent  
 
 >

push your code from local to live github
< git push origin master >

origin is the location of the github and master is the branch


******** pushing local folder on github ******
=> mkdir folderName
=> cd folderName
=> git init
=> make changes ---> touch README.md => write some text into it
=> git add .
=> git commit -m "message"
=> create a repo at github
=> copy repo url
=> into your local folder < git remote add origin <repo url> >
=> git remote -v
=> git push -u origin master => -u sets upstream as master with origin next time you want to push something you just have to do git push 

******* Branching ***********
check the no of branches
< git brabch >

create new branch
< git checkout -b branchName>

see the changes in newBranch
< git diff branchName >

after all create a PR and merge the pull request